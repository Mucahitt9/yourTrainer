import React, { Suspense, lazy } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './utils/AuthContext';\nimport { ToastProvider } from './utils/ToastContext';\nimport ErrorBoundary from './components/error/ErrorBoundary';\nimport PWAInstallPrompt from './components/PWAInstallPrompt';\nimport LoginPage from './pages/LoginPage';\nimport Layout from './components/Layout';\nimport LoadingSpinner from './components/LoadingSpinner';\n\n// Lazy load heavy pages\nconst DashboardPage = lazy(() => import('./pages/DashboardPage'));\nconst ClientsPage = lazy(() => import('./pages/ClientsPage'));\nconst ClientListPage = lazy(() => import('./pages/ClientListPage'));\nconst ClientDetailPage = lazy(() => import('./pages/ClientDetailPage'));\nconst ClientEditPage = lazy(() => import('./pages/ClientEditPage'));\nconst ProfilePage = lazy(() => import('./pages/ProfilePage'));\nconst ToastDemoPage = lazy(() => import('./pages/ToastDemoPage'));\n\n// Protected Route bileşeni\nconst ProtectedRoute = ({ children }) => {\n  const { isAuthenticated } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" replace />;\n  }\n  \n  return (\n    <Suspense fallback={<LoadingSpinner />}>\n      {children}\n    </Suspense>\n  );\n};\n\n// Ana App bileşeni\nconst AppContent = () => {\n  const { isAuthenticated } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* PWA Install Prompt - sadece login olduktan sonra göster */}\n      {isAuthenticated && <PWAInstallPrompt />}\n      \n      <Routes>\n        <Route \n          path=\"/login\" \n          element={\n            isAuthenticated ? <Navigate to=\"/dashboard\" replace /> : <LoginPage />\n          } \n        />\n        <Route \n          path=\"/\" \n          element={\n            <ProtectedRoute>\n              <Layout />\n            </ProtectedRoute>\n          }\n        >\n          <Route index element={<Navigate to=\"/dashboard\" replace />} />\n          <Route path=\"dashboard\" element={<DashboardPage />} />\n          <Route path=\"clients\">\n            <Route path=\"new\" element={<ClientsPage />} />\n            <Route path=\"list\" element={<ClientListPage />} />\n            <Route path=\":id\" element={<ClientDetailPage />} />\n            <Route path=\":id/edit\" element={<ClientEditPage />} />\n            <Route index element={<Navigate to=\"new\" replace />} />\n          </Route>\n          <Route path=\"profile\" element={<ProfilePage />} />\n          <Route path=\"toast-demo\" element={<ToastDemoPage />} />\n        </Route>\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Routes>\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <ErrorBoundary>\n      <AuthProvider>\n        <ToastProvider>\n          <AppContent />\n        </ToastProvider>\n      </AuthProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;